1. ELF Magic numbers are at the beggining bytes of a file, and are used to mark that file as being of an elf type. The elf magic numbers are defined on line 83 - 86 in kern/include/elf.h  as ELFMAG[0..3] 0x7f, E, L, F.

2. UIO_USERISPACE contains the instructions for user processes. UIO_USERSPACE refers to the location of user process data. UIO_SYSSPACE should be used when the source or destination of the memory tansfer are in the kernel space. 

3. The memory is loaded at a virtual address. The uio struct contains a pointer to the virtual address, and therefore the struct can be stored on the stack.

4. vfs_close() must be called so that another process or thread can execute the same program in that file.

5. mips_usermode() in kern/arch/mips/locor/trap.c is called to change into user mode. The function itself is machine independent as it calls functions (for instance to turn off interrupts) whose implementation could change for different architectures. 

6. copyin() and copyout() are defined in kern/vm/copyinout.c. memmove() is defined in common/libc/string/memmove.c. Copyin/copyout copy data from kernel addresses to user addresses (or vice versa) . Therefore, copyin/copyout functions need to make sure need to make sure that user pointers are not accessing off limit addresses, something memove() does not do.

7. It is used to distinguish user pointers from kernel pointers.  

8. from kern/arch/mips/include/trapframe.h #define EX_SYS 8 .  

9) From looking in syscall.c, before the syscall function returns the program
counter is incremented by 4, therefore an instruction in MIPS is 4 bytes.

10) We want to change kill_curthread so that the kernel does not panic if there 
a fatal fault in user-level code.

11) From ../arch/mips/syscall/syscall.c, a system call that takes more than 4 
arguments must get the additional arguments from the user-level stack with copyin 
starting at sp+16.

12) SYSCALL allows for a system call by loading the syscall number into v0 (the 
register that is expected from the kernel) and then jumps to the shared syscall 
code.

13) The instruction on line 84 of ../userland/lib/libc/arch/mips/syscalls-mips.S 
triggers the system call with the instruction "syscall"

14) The first 4 arguments are passed in registers a0-a3 and 64-bit arguments are 
passed in pairs of registers, so in this case in a2 and a3. So for lseek, arg0 will
be passed in a0, arg1 will be passed in a2 and a3 (leaving a1 unused), and finally
arg3 will be in the user-level stack at sp+16 (explained in q11). Since the return
value is 64-bit, it will be stored in v0 and v1.

15) To open a file vfs_open() is called. VOP_READ is used to read the file. VOP_WRITE
is used to write a file. The data structure vnode is used to represent an open file.

16) VOP_INCREF and VOP_DECREF are defined as vnode_incref and vnode_decref, 
respectfully. They are used to increment and decrement the reperence count.
